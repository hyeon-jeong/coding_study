'''정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
명령은 총 다섯 가지이다.
push X: 정수 X를 스택에 넣는 연산이다.
pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 스택에 들어있는 정수의 개수를 출력한다.
empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.'''
'''정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
명령은 총 다섯 가지이다.
push X: 정수 X를 스택에 넣는 연산이다.
pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 스택에 들어있는 정수의 개수를 출력한다.
empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.'''

import sys

N = int(sys.stdin.readline()) # 시간 초과 때문에 input 대신에 사용한다.
stack = list()

for i in range(N) :
    m = sys.stdin.readline().rstrip() 
    # sys.stdin.readline()은 \n까지 포함하기 때문에 이를 없애기 위해서 오른쪽 공백을 없애는 rstrip()를 사용해준다.
    if m.split()[0] == 'push' : # pus는 명령어가 'push X'의 형태로 들어오기 때문에 공백을 기준으로 명령어와 값을 구분해준다.
        stack.append(int(m.split()[1])) # push할 값을 int 형태로 변환하여 stack에 넣어준다.
    elif m == 'pop' :
        if not stack : # stack이 비었을 경우를 의미한다.
            print("-1")
        else :
            print(stack.pop()) # stack의 제일 위에 값을 꺼내고 출력한다.
    elif m == 'size' :
        print(len(stack)) # stack 즉, list의 길이를 알려준다.
    elif m == 'empty' :
        if not stack :
            print("1")
        else :
            print("0")
    elif m == 'top' :
        if not stack :
            print("-1")
        else :
            print(stack[-1]) # 파이썬을 리스트가 인덱스가 0부터 시작하기 때문에 [-1]은 마지막 값을 의미한다.
